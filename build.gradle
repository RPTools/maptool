import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import org.ajoberstar.grgit.*

ext.repo = Grgit.open(project.file('.'))



task wrapper(type: Wrapper) {
    gradleVersion='2.1'
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.11.2'
        classpath "de.gliderpilot.gradle.jnlp:gradle-jnlp-plugin:0.0.5"
        classpath "com.diffplug.gradle.spotless:spotless:1.3.0-SNAPSHOT"
    }
}

configurations {
    osxTools
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}


dependencies {
    osxTools 'com.oracle.appbundler:AppBundlerTask:1.0'
}

ext.compileDate = new Date();
ext.yyyymmdd = (new SimpleDateFormat('yyyyMMDD')).format(ext.compileDate);





/*
 * Gets the version name from the latest Git tag
 */


def getVersionName() {
	if (project.hasProperty('buildVersion')) {
		return buildVersion
	} else {
		String vtxtVersionNo = file('build-resources/version.txt').text.trim()
		return vtxtVersionNo
	}
}







allprojects {
    repositories {
        mavenCentral()
        maven {
            url = 'http://maptool.craigs-stuff.net/repo/'
        }
        mavenLocal()
    }

    group = 'net.rptools.maptool'
    version = getVersionName()

}


subprojects {

    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'application'
    apply plugin: "com.diffplug.gradle.spotless"

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    // Dont fail build if tests fail until tests are cleaned up
    test.ignoreFailures = true

    findbugs {
        ignoreFailures = true
        toolVersion = '3.0.0'
        effort = 'max'
        sourceSets = []  // Empty source set so it wont run during build/check
    }

    pmd {
        ignoreFailures = true
        sourceSets = []  // Empty source set so it wont run during tebuild/check
    }


    spotless {
        java {
            eclipseFormatFile '../build-resources/eclipse.prefs.formatter.xml'
        }
    }

}


task showBuildVersion() << {
    println 'Build Version Number = ' + project.version
}


project(':launcher') {
    mainClassName='net.rptools.maptool.launcher.MapToolLauncher'
    ext.distSource = projectDir.getPath() + '/src/dist/'

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    jar {
        manifest.attributes(
                'Main-Class': mainClassName,
        )
    }

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            include '**/*.properties'
            filter(ReplaceTokens, tokens: [
                'buildDate': rootProject.ext.yyyymmdd,  'buildNumber': getVersionName()])
        }
        from(sourceSets.main.resources.srcDirs) {
            exclude '**/*.properties'
        }
    }

    task release(dependsOn: assemble) << {
    }
}

project(':maptool') {
    apply plugin: 'de.gliderpilot.jnlp'

    mainClassName='net.rptools.maptool.client.LaunchInstructions'


    ext.distSource = projectDir.getPath() + '/src/dist/'

    dependencies {
        compile 'net.java.abeille:abeille-formsrt:2.0'
        compile 'net.rptools.clientserver:clientserver:1.0.b17'
        //compile 'net.rptools.clientserver:clientserver:1.4.0.+'
        compile 'org.hibernate:antlr:2.7.5H3'
        compile 'commons-beanutils:commons-beanutils-core:1.8.3'
        compile 'org.ow2.util.bundles:commons-collections-3.2.1:1.0.0'
        compile 'commons-io:commons-io:2.0'
        compile 'commons-jxpath:commons-jxpath:1.3'
        compile 'commons-lang:commons-lang:2.6'
        compile 'commons-logging:commons-logging:1.1.1'
        compile 'commons-net:commons-net:3.2'
        compile 'net.rptools.decktool:decktool:1.0.b1'
        compile 'net.rptools.dicelib:dicelib:1.4.0.+'
        compile 'net.sf.ezmorph:ezmorph:1.0.5'
        compile 'com.caucho.hessian:hessian:3.1.6'
        compile 'jide-common:jide-common:3.2.3'
        compile 'jide-components:jide-components:3.2.3'
        compile 'jide-dialogs:jide-dialogs:3.2.3'
        compile 'jide-dock:jide-dock:3.2.3'
        compile 'jide-editor:jide-editor:3.2.3'
        compile 'jide-grids:jide-grids:3.2.3'
        compile 'jide-properties:jide-properties:3.2.3'
        compile 'jide-shortcut:jide-shortcut:3.2.3'
        compile 'de.huxhorn.sulky:de.huxhorn.sulky.3rdparty.jlayer:1.0'
        compile 'rhino:js:1.7R1'
        compile 'net.sf.json-lib:json-lib:2.4:jdk15'
        compile 'log4j:log4j:1.2.16'
        compile 'net.rptools.maptool.resource:maptool.resource:1.0.b18'
        compile 'net.rptools.parser:parser:1.1.b24'
        //compile 'net.rptools.parser:parser:1.4.0.+'
        compile 'ca.odell.renderpack:renderpack:1.2004'
        compile 'net.rptools.rplib:rplib:1.4.0.1'
        compile 'net.tsc.servicediscovery:servicediscovery:1.0.b5'
        compile 'org.swinglabs:swing-worker:1.1'
        compile 'net.sbbi.upnp:upnplib:1.0.9-nodebug'
        compile 'com.withay:withay-util:1.0'
        compile 'xmlpull:xmlpull:1.1.3.1'
        compile 'xpp3:xpp3_min:1.1.4c'
        compile 'com.thoughtworks.xstream:xstream:1.4.1'
        compile 'yasb:yasb:0.2-21012007'
        compile 'de.muntjak.tinylookandfeel:tinylaf-nocp:1.4.0'
        compile 'org.eclipse.jetty:jetty-server:9.3.0.M0'
        compile 'org.eclipse.jetty:jetty-servlet:9.3.0.M0'
        compile 'org.eclipse.jetty:jetty-webapp:9.3.0.M0'
        compile 'org.eclipse.jetty:jetty-continuation:9.3.0.M1'
        compile 'org.eclipse.jetty.websocket:websocket-server:9.3.0.M1'
        compile 'org.eclipse.jetty.websocket:websocket-client:9.3.0.M1'
        compile 'org.eclipse.jetty.websocket:websocket-servlet:9.3.0.M1'
        compile 'org.eclipse.jetty.websocket:websocket-api:9.3.0.M1'


        testCompile group: 'junit', name: 'junit', version: '4.11'

    }

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            include '**/*.txt'
            filter(ReplaceTokens, tokens: [
                'buildDate': rootProject.ext.yyyymmdd,  'buildNumber': getVersionName()])
        }
        from(sourceSets.main.resources.srcDirs) {
            exclude '**/*.txt'
        }
    }


    task copyLibs(type: Sync) {
        from configurations.compile
        into jar.destinationDir.getPath() + '/lib'
    }

    jar {
        manifest.attributes(
            'Main-Class': mainClassName,
            'Class-Path': configurations.runtime.files.collect { "lib/" + it.name }.join(' ')
        )
    }
    assemble.dependsOn += copyLibs;

    task release(dependsOn: build) << {
    }

    jnlp {
        withXml {
            information {
                title 'RPTools MapTool'
                vendor project.group ?: project.name
            }
            security {
                'all-permissions'()
            }
        }
        signJarParams = [
            storepass: 'rptools',
            keystore: '../build-resources/rptools-keystore',
            alias: 'rptools',
            lazy: 'true'
        ]
    }

}

task deleteBuild(type: Delete) {
    delete 'build/'
}

task clean(dependsOn: deleteBuild) {
}


task copySubProjectFiles(type: Sync) {
    from project(':maptool').jar.destinationDir.getPath()
    from project(':maptool').ext.distSource
    from project(':launcher').jar.destinationDir.getPath()
    from project(':launcher').ext.distSource
    into 'build/tmp/dist/'
    outputs.upToDateWhen {
        false
    }
}
copySubProjectFiles.mustRunAfter(':maptool:release', ':launcher:release')



task zipRelease(dependsOn: copySubProjectFiles, type: Zip) {
    from 'build/tmp/dist/'
    into  ''
    baseName = 'maptool-' + getVersionName()
    destinationDir new File(projectDir, 'build')
    outputs.upToDateWhen {
        false
    }
}


task osxApp() << {
    def baseDir = '.'
    def buildVersion = rootProject.getVersionName()
    def mainClassName = project(":maptool").mainClassName
    def sourceDir = 'build/tmp/dist'
    ant {
        taskdef(
            name: 'bundleapp',
            classname: 'com.oracle.appbundler.AppBundlerTask',
            classpath: configurations.osxTools.asPath
        )
        bundleapp(
            outputdirectory: 'build/tmp/',
            name: 'MapTool-' + buildVersion,
            displayname: 'MapTool-' + buildVersion,
            identifier: 'net.rptools.maptool',
            mainclassname: mainClassName,
            signature: 'RPTM',
            icon: 'build-resources/maptool-icon.icns'
        ) {
            classpath(dir: sourceDir) {
                include(name: '*.jar')
                include(name: '**/*.jar')
            }
            option(value: '-Dapple.laf-useScreenMenuBar=true')
            option(value: '-Dfile.encoding=UTF-8')
            option(value: '-Xmx768m')
            option(value: '-Xss4m')
            option(value: '-Dcom.apple.textantialiasing=true')
            option(value: '-Dcom.apple.antialiasing=true')
            option(value: '-Djava.library.path=$APP_ROOT/Contents/Java')
        }
    }
}
osxApp.mustRunAfter(copySubProjectFiles)

task zipOSXApp(dependsOn: osxApp, type: Zip) {
    from 'build/tmp/MapTool-' + getVersionName() + '.app'
    into  'MapTool-' + getVersionName() + '.app'
    baseName = 'maptool-' + getVersionName() + '-osx'
    destinationDir new File(projectDir, 'build')
    outputs.upToDateWhen {
        false
    }
}



task release() {
    println 'Creating Release'
}
release.dependsOn += zipRelease
release.dependsOn += zipOSXApp

