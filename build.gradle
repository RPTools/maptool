/*
 * vim:filetype=gradle:
 *
 * For more details take a look at the Java Quickstart chapter in the
 * Gradle user guide available at:
 * https://docs.gradle.org/4.1/userguide/tutorial_java_projects.html
 */
import org.gradle.plugins.ide.eclipse.model.AccessRule

buildscript {
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.8.0"
        //classpath "de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

// Access Git info from build script
plugins {
    id "org.ajoberstar.grgit" version "2.1.0"
}

// Apply the java plugin to add support for Java
apply plugin: 'base'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.diffplug.gradle.spotless'
//apply plugin: 'javafx-gradle-plugin'

// ======================================================================
// Don't edit anything in this file.  All configurable values should be
// changed in 'settings.gradle' instead.
def props = [
    version        : '1.4.1.9',
    vendor         : 'RPTools',
    defaultJvmArgs : '-Xss4M',
    javafx         : false,
]
// ======================================================================

// Definitions
defaultTasks 'clean', 'build'
sourceCompatibility = 1.9
targetCompatibility = 1.9

// Don't fail build if tests fail until tests are cleaned up
test.ignoreFailures = true

// Used by gradle assemble & run tasks
mainClassName = 'net.rptools.maptool.client.LaunchInstructions'

applicationDefaultJvmArgs = [props.defaultJvmArgs]

// Custom properties
ext {
    git = org.ajoberstar.grgit.Grgit.open(currentDir: file('.'))
    revision = git.head().abbreviatedId
    revisionFull = git.head().id
    branch = git.branch.getCurrent().getName()
    //gdxVersion = '1.9.6'
    //box2DLightsVersion = '1.4'
    //aiVersion = '1.8.0'
}

run {
    args = [ '-v='+props.version ]
    applicationDefaultJvmArgs = [
                props.defaultJvmArgs,
                "-Djava.library.path=lib",
                //"-Dsentry.environment=Development"
        ]

    if (System.getProperty("exec.args") != null) {
        args = System.getProperty("exec.args").split()
    }
}

spotless {
    java {
        licenseHeaderFile 'spotless.license.java'
        eclipse().configFile('build-resources/eclipse.prefs.formatter.xml')
    }

    format 'misc', {
                // Kludge using string concat so that the entire
                // block can be commented out using block comments.
        target '**'+'/*.gradle', '**'+'/*.md', '**'+'/.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces(4)
    }
}

// Set eclipse natures, access rules, and other settings
// https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseProject.html
// https://discuss.gradle.org/t/buildship-1-0-18-is-now-available/19012
eclipse {
    project {
        natures 'org.eclipse.buildship.core.gradleprojectnature'
        buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
    }

    classpath {
        file {
            if (props.javafx) {
                // JavaFX not used yet...
                withXml {
                    def node = it.asNode()
                    node.appendNode("classpathentry",
                        [kind: "con",
                         path: "org.eclipse.fx.ide.jdt.core.JAVAFX_CONTAINER"
                        ])
                }
            }
            whenMerged {
                entries.each { source ->
                    if (source.kind == 'con' && source.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER')) {
                        if (props.javafx) {
                            source.accessRules.add(
                                new AccessRule('0', 'javafx/**'))
                        }
                        source.accessRules.add(
                            new AccessRule('0', 'jdk/nashorn/api/**'))
                    }
                }
            }
        }
    }
}

// Declare where to find the dependencies of the project
repositories {
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://bintray.com/rptools/RPTools/' }
    maven { url 'http://maptool.craigs-stuff.net/repo/' }
    maven { url 'http://www.nerps.net/repo/' }
}

// Declare the dependencies for your production and test code
dependencies {
    // For UserJvmOptionsService; native to os...
    // compile files("${System.properties['java.home']}/../lib/packager.jar")

    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1' // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4

    // Get release info from GitHub using API v3
    // compile group: 'org.eclipse.mylyn.github', name: 'org.eclipse.egit.github.core', version: '4.9.0.201710071750-r' // https://mvnrepository.com/artifact/org.eclipse.mylyn.github/org.eclipse.egit.github.core
    // compile group: 'org.kohsuke', name: 'github-api', version: '1.90' // https://mvnrepository.com/artifact/org.kohsuke/github-api

    compile 'net.java.abeille:abeille-formsrt:2.0'
    compile 'net.rptools.clientserver:clientserver:1.4.0.+'
    compile 'org.hibernate:antlr:2.7.5H3'

    compile 'commons-beanutils:commons-beanutils-core:1.8.3'
    compile 'commons-io:commons-io:2.5'
    compile 'commons-jxpath:commons-jxpath:1.3'
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-net:commons-net:3.2'
    compile 'commons-cli:commons-cli:1.3'

    compile 'net.rptools.decktool:decktool:1.0.b1'
    compile 'net.rptools.dicelib:dicelib:1.4.0.+'
    compile 'net.rptools.maptool.resource:maptool.resource:1.0.b18'
    compile 'net.rptools.parser:parser:1.4.0.+'

    compile 'jide-common:jide-common:3.2.3'
    compile 'jide-components:jide-components:3.2.3'
    compile 'jide-dialogs:jide-dialogs:3.2.3'
    compile 'jide-dock:jide-dock:3.2.3'
    compile 'jide-editor:jide-editor:3.2.3'
    compile 'jide-grids:jide-grids:3.2.3'
    compile 'jide-properties:jide-properties:3.2.3'
    compile 'jide-shortcut:jide-shortcut:3.2.3'

    /*
    // For Sentry bug reporting
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.8.2'  // Bridges v1 to v2 for other code in other libs
    compile 'org.eclipse.jetty:jetty-server:9.3.0.M0'
    compile 'org.eclipse.jetty:jetty-servlet:9.3.0.M0'
    compile 'org.eclipse.jetty:jetty-webapp:9.3.0.M0'
    compile 'org.eclipse.jetty:jetty-continuation:9.3.0.M1'
    compile 'org.eclipse.jetty.websocket:websocket-server:9.3.0.M1'
    compile 'org.eclipse.jetty.websocket:websocket-client:9.3.0.M1'
    compile 'org.eclipse.jetty.websocket:websocket-servlet:9.3.0.M1'
    compile 'org.eclipse.jetty.websocket:websocket-api:9.3.0.M1'

    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'

    compile 'io.sentry:sentry:1.5.0'
    compile 'io.sentry:sentry-log4j2:1.5.2'

    compile 'de.huxhorn.sulky:de.huxhorn.sulky.3rdparty.jlayer:1.0'
    compile 'org.reflections:reflections:0.9.10'

    // For PDF image extraction
    compile 'org.apache.pdfbox:pdfbox:2.0.0'
    compile 'org.apache.pdfbox:pdfbox-tools:2.0.0'                              // Dependency for pdfbox
    compile 'org.bouncycastle:bcmail-jdk15on:1.54'                              // To decrypt passworded/secured pdf's
    compile 'com.github.jai-imageio:jai-imageio-core:1.3.1'                     // For pdf image extraction, specifically for jpeg2000 (jpx) support.
    compile 'com.github.jai-imageio:jai-imageio-jpeg2000:1.3.0'                 // For pdf image extraction, specifically for jpeg2000 (jpx) support.

    // For syntax highlighting in macro editor
    compile group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '2.6.1'    // https://mvnrepository.com/artifact/com.fifesoft/rsyntaxtextarea
    compile group: 'com.fifesoft', name: 'rstaui', version: '2.6.1'             // https://mvnrepository.com/artifact/com.fifesoft/rstaui
    compile group: 'com.fifesoft', name: 'autocomplete', version: '2.6.0'       // https://mvnrepository.com/artifact/com.fifesoft/autocomplete

    // For simple xml work in Hero Lab integration
    compile group: 'com.jcabi', name: 'jcabi-xml', version: '0.18.1'            // https://mvnrepository.com/artifact/com.jcabi/jcabi-xml

    // box2dlights test
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"

    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"

    // Not in use at this time, left for easy reference later...
    //compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
    //compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    //compile "com.badlogicgames.ashley:ashley:$ashleyVersion"
    //compile "com.badlogicgames.gdx:gdx-ai:$aiVersion"
    //compile "com.badlogicgames.gdx:gdx-bullet:$gdxVersion"
    */

    compile 'net.sf.ezmorph:ezmorph:1.0.5'
    compile 'net.sf.json-lib:json-lib:2.4:jdk15'

    compile 'com.caucho.hessian:hessian:3.1.6'
    compile 'rhino:js:1.7R1'
    compile 'ca.odell.renderpack:renderpack:1.2004'
    compile 'net.tsc.servicediscovery:servicediscovery:1.0.b5'
    compile 'org.swinglabs:swing-worker:1.1'
    compile 'net.sbbi.upnp:upnplib:1.0.9-nodebug'
    compile 'com.withay:withay-util:1.0'
    compile 'xmlpull:xmlpull:1.1.3.1'
    compile 'xpp3:xpp3_min:1.1.4c'
    compile 'com.thoughtworks.xstream:xstream:1.4.9'
    compile 'yasb:yasb:0.2-21012007'
    compile 'de.muntjak.tinylookandfeel:tinylaf-nocp:1.4.0'

    // Declare the dependency for your favourite test framework you
    // want to use in your tests.  TestNG is also supported by the
    // Gradle Test task.  Just change the testCompile dependency to
    // testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

task uberJar(type: Jar) {
    group = 'distribution'
    description = 'Create uber jar for native installers'

    manifest {
        attributes  'Implementation-Title': project.name,
                    'Implementation-Version': props.version,
                    'Implementation-Vendor': props.vendor,
                    'Git-Commit': revision,
                    'Git-Commit-SHA': revisionFull,
                    'Git-Branch': branch,
                    'Built-By': System.getProperty('user.name'),
                    'Built-Date': new Date(),
                    'Built-JDK': System.getProperty('java.version'),
                    'Source-Compatibility': project.sourceCompatibility,
                    'Target-Compatibility': project.targetCompatibility,
                    'Main-Class': project.mainClassName
    }

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
        // Jamz: This is needed to prevent org.bouncycastle:bcmail
        // resigning and security errors
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

// For logging Git Commit during CI
task displayGitInfo {
    doLast {
        println 'Git-Branch: ' + branch
        println 'Git-Commit-SHA: ' + revisionFull
    }
}

// Currently includes license, manifest (for hiDPI)
// and msvcr100.dll (due to packaging bug)
task copyPackageExtras(type: Copy) {
    from('package/license/')
    into('build/libs/')
    include('*')
}

task prepareInnoSetup(type: Copy) {
    from("package/windows/MapTool.iss.template")
    into("package/windows/")
    rename("MapTool.iss.template", "MapTool.iss")
    def tokens = [
        AppName: "${project.name}",
        AppVersion: "${props.version}",
        Vendor: "${props.vendor}",
        WizardImage: "${project.projectDir.absolutePath}/package/windows/${project.name}-setup.bmp",
        Slash: "\\",
    ]
    expand(tokens)
    inputs.properties(tokens)
}

task deploy(dependsOn: [displayGitInfo, uberJar, copyPackageExtras, prepareInnoSetup]) {
    group = 'distribution'
    description = 'Create native installers'

    tasks.findByName('copyPackageExtras').mustRunAfter 'uberJar'

    doLast {
        // Using the -deploy Command with Bundler Arguments
        // javapackager -deploy -native exe \
        //   -BsystemWide=true \
        //   -BjvmOptions=-Xmx128m \
        //   -BjvmOptions=-Xms128m \
        //   -outdir packages \
        //   -outfile BrickBreaker \
        //   -srcdir dist
        //   -srcfiles BrickBreaker.jar \
        //   -appclass brickbreaker.Main \
        //   -name BrickBreaker \
        //   -title "BrickBreaker demo"
        // Note: You can specify a JRE using
        //  "-Bruntime=../../../deploy-ready-jre"
        // It will bundle system/workspace JDK by default
        def javapackager_deploy = exec {
            workingDir "${project.projectDir.absolutePath}"

            println workingDir

            commandLine "javapackager",
                "-deploy", "-v",
                "-native", "installer",
                "-appclass", project.mainClassName,
                "-srcdir", "build/libs",
                "-outdir", "releases/release-"+props.version,
                "-outfile", project.name,
                "-name", rootProject.name,
                "-title", rootProject.name,
                "-vendor", props.vendor,
                "-BdropinResourcesRoot=.",
                "-BAssociations=cmpgn",
                "-BinstalldirChooser=true",
                "-BsystemWide=false",
                "-BmenuHint=true",
                "-Bwin.menuGroup=" + props.vendor,
                "-BshortcutHint=true",
                "-BappVersion=" + props.version,
                "-Bwin.msi.productVersion=1.4.1",
                "-BlicenseFile=COPYING.AFFERO",
                "-BlicenseType=GNU AFFERO GENERAL PUBLIC LICENSE",
                "-Bcategory=Games",
                "-Bemail=http://forums.rptools.net/",
                "-BjvmProperties=MAPTOOL_DATADIR=.maptool-" + props.vendor
                //"-BuserJvmOptions=-Xss=4M"

                println commandLine
        }
    }
}

/*
jfx {
    // minimal requirement for jfxJar-task
    mainClass = mainClassName
}
*/

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}
