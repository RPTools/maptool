/*
* For more details take a look at the Java Quickstart chapter in the Gradle
* user guide available at https://docs.gradle.org/4.1/userguide/tutorial_java_projects.html
*/
// Access Git info from build script
plugins {
    id "application"
    id "org.ajoberstar.grgit" version "4.1.0"
    id "com.diffplug.spotless" version "5.2.0"
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.runtime' version '1.12.4'
}

// Apply the java plugin to add support for Java
apply plugin: 'base'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.diffplug.spotless'

// Definitions
defaultTasks 'clean', 'build'
sourceCompatibility = 16
targetCompatibility = 16


// Used by gradle assemble & run tasks
mainClassName = 'net.rptools.maptool.client.LaunchInstructions'
applicationDefaultJvmArgs = ["-Xss8M"]
def appSemVer = ""
def winUpgradeUUID = UUID.randomUUID().toString();

// Custom properties
ext {
    // Allow packagers to build from the source code tarball, which doesn't
    // have '.git'
    revisionFull = project.findProperty('gitCommit')
    revision = revisionFull ? revisionFull.substring(0, 10) : ''
    tagVersion = project.findProperty('gitTag')
    environment = 'Production'
    sentryDSN = sentry_production_dsn

    if (!project.hasProperty('noGit')) {
        // Get tag and commit info from Git to use for version numbering
        def grgit = org.ajoberstar.grgit.Grgit.open(currentDir: file('.'))
        def head = grgit.head()
        def tags = grgit.tag.list().find {
            it.commit == head
        }

        revision = head.abbreviatedId
        revisionFull = head.id

        if (tags) {
            tagVersion = tags.getName()
            environment = "Production"
            sentryDSN = sentry_production_dsn
        } else {
            tagVersion = 'SNAPSHOT-' + revision
            project.description = "SNAPSHOT-" + revision
            environment = "Development"
            sentryDSN = sentry_development_dsn
        }
    }

    // This will strip anything other than core semver from the tag
    // e.g. "1.7.2-rc.1" becomes "1.7.2"
    def foundTags = (tagVersion =~ /\d+\.\d+\.\d+/).findAll()

    // If no semver exists, like in dev environment use a defaultVersion from gradle.properties
    if (foundTags.isEmpty()) {
        appSemVer = defaultVersion
    } else {
        appSemVer = foundTags[0]
        developerRelease = ""
    }

    // vendor, tagVersion, appSemVer, and DSN's defaults are set in gradle.properties
    println 'Configuring for ' + project.name + developerRelease + " " + tagVersion + " by " + vendor
    println "AppVersion: " + appSemVer

    // vendor, tagVersion, appSemVer, and DSNs defaults are set in gradle.properties
    println "OS Detected: " + osdetector.os
}

spotless {
    java {
        target project.fileTree(project.rootDir) {
            include 'src/**/*.java'
            exclude '**/JTextAreaAppender.java'
            exclude '**/TransferableHelper.java' // Temporary until switch expression is supported.
        }
        licenseHeaderFile 'spotless.license.java'


        // Now using the Google Java style guide
        googleJavaFormat()
    }

    format 'misc', {
        target '**/*.gradle', '**/.gitignore'

        // spotless has built-in rules for most basic formatting tasks
        trimTrailingWhitespace()
        // or spaces. Takes an integer argument if you don't like 4
        indentWithSpaces(4)
    }
}


// org.openjfx.javafxplugin
javafx {
    version = '16'
    // modules = ['javafx.fxml', 'javafx.graphics']
    modules = ['javafx.base', 'javafx.controls', 'javafx.media', 'javafx.swing', 'javafx.web', 'javafx.fxml', 'javafx.graphics']
}

run {
    args = ['-v=' + appSemVer]
    applicationDefaultJvmArgs = ["-Xss8M", "-Dsentry.environment=Development", "-Dfile.encoding=UTF-8", "-DMAPTOOL_DATADIR=.maptool-" + vendor.toLowerCase(), "-XX:+ShowCodeDetailsInExceptionMessages", "--add-opens=java.desktop/java.awt=ALL-UNNAMED", "--add-opens=java.desktop/java.awt.geom=ALL-UNNAMED", "--add-opens=java.desktop/sun.awt.geom=ALL-UNNAMED", "--add-opens=java.base/java.util=ALL-UNNAMED", "--add-opens=javafx.web/javafx.scene.web=ALL-UNNAMED", "--add-opens=javafx.web/com.sun.webkit=ALL-UNNAMED", "--add-opens=java.desktop/javax.swing=ALL-UNNAMED"]
    // Add -Dlog4j2.debug to see log4j2 details
    // Add  -Djavax.net.debug=all to debug networking issues

    if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

// Badass Runtime Plugin Options
runtime {
    options = ['--strip-debug', '--strip-native-commands', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.base',
               'java.compiler',
               'java.datatransfer',
               'java.desktop',
               'java.instrument',
               'java.logging',
               'java.management',
               'java.naming',
               'java.net.http',
               'java.prefs',
               'java.rmi',
               'java.scripting',
               'java.security.sasl',
               'java.sql',
               'java.transaction.xa',
               'java.xml',
               'jdk.dynalink',
               'jdk.jfr',
               'jdk.jsobject',
               'jdk.unsupported',
               'jdk.unsupported.desktop',
               'jdk.xml.dom',
               'jdk.crypto.cryptoki',
               'jdk.crypto.ec'
            ]



    jpackage {
        installerOutputDir = file("releases")
        jvmArgs = ["-Xss8M", "-Dsentry.environment=Production", "-Dfile.encoding=UTF-8", "-DMAPTOOL_DATADIR=.maptool-" + vendor.toLowerCase(), "-XX:+ShowCodeDetailsInExceptionMessages", "--add-opens=java.desktop/java.awt=ALL-UNNAMED", "--add-opens=java.desktop/java.awt.geom=ALL-UNNAMED", "--add-opens=java.desktop/sun.awt.geom=ALL-UNNAMED", "--add-opens=java.base/java.util=ALL-UNNAMED", "--add-opens=javafx.web/javafx.scene.web=ALL-UNNAMED", "--add-opens=javafx.web/com.sun.webkit=ALL-UNNAMED", "--add-opens=java.desktop/javax.swing=ALL-UNNAMED"]

        imageOptions = []
        imageName = project.name + developerRelease
        installerName = project.name
        installerOptions = [
                //'--temp', 'releases/temp-files',
                '--verbose',
                '--description', project.description,
                '--copyright', 'Copyright 2000-2021 RPTools.net',
                '--license-file', 'package/license/COPYING.AFFERO',
                '--app-version', appSemVer,
                '--vendor', vendor,
                '--file-associations', 'package/associations.properties'
        ]

        if (osdetector.os.is('windows')) {
            println "Setting Windows installer options with upgrade uuid = " + winUpgradeUUID
            resourceDir = file('package/windows')
            imageOptions += ['--icon', 'package/windows/' + project.name + developerRelease + '.ico']
            installerOptions += [
                    '--win-dir-chooser',
                    '--win-per-user-install',
                    '--win-shortcut',
                    '--win-menu',
                    '--win-menu-group', vendor,
                    '--win-upgrade-uuid', winUpgradeUUID
            ]
            targetPlatform('win') {
                jdkHome = jdkDownload('https://github.com/AdoptOpenJDK/openjdk16-binaries/releases/download/jdk-16%2B36/OpenJDK16-jdk_x64_windows_hotspot_16_36.zip');
            }
        }

        if (osdetector.os.is('osx')) {
            println "Setting MacOS installer options"
            imageOptions += ['--icon', 'package/macosx/' + project.name + developerRelease + '.icns']
            installerOptions += [
                    '--mac-package-name', project.name + developerRelease
            ]
            targetPlatform('mac') {
                jdkHome = jdkDownload('https://github.com/AdoptOpenJDK/openjdk16-binaries/releases/download/jdk-16%2B36/OpenJDK16-jdk_x64_mac_hotspot_16_36.tar.gz');
            }
        }

        if (osdetector.os.is('linux')) {
            println "Setting Linux installer options"
            resourceDir = file('package/linux')
            imageOptions += ['--icon', 'package/linux/' + project.name + developerRelease + '.png']
            installerOptions += [
                    '--linux-menu-group', 'Game',
                    '--linux-shortcut'
            ]

            if (installerType == 'deb') {
                installerOptions += [
                        '--linux-deb-maintainer', 'admin@rptools.net'
                ]
            }

            if (installerType == 'rpm') {
                installerOptions += [
                        '--linux-rpm-license-type', 'AGPLv3'
                ]
            }
            targetPlatform('linux') {
                jdkHome = jdkDownload('https://github.com/AdoptOpenJDK/openjdk16-binaries/releases/download/jdk-16%2B36/OpenJDK16-jdk_x64_linux_hotspot_16_36.tar.gz');
            }
        }
    }
}
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url = 'https://maptool.craigs-stuff.net/repo/' }
    maven { url = 'https://nerps.net/repo/' }
    maven { url = 'https://jitpack.io' }
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // Jamz: Do NOT update log4j libs without testing with uberjar build, 2.13.0 currently does not work
    // See open issue: https://issues.apache.org/jira/browse/LOG4J2-673
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.13.0'	// Bridges v1 to v2 for other code in other libs

    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'

    // For Sentry bug reporting
    implementation group: 'io.sentry', name: 'sentry', version: '1.7.29'
    implementation group: 'io.sentry', name: 'sentry-log4j2', version: '1.7.29'

    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.apache.commons', name: 'commons-configuration2', version: '2.7'

    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'commons-io:commons-io:2.6'
    implementation 'commons-jxpath:commons-jxpath:1.3'
    implementation 'commons-lang:commons-lang:2.6'
    implementation 'commons-net:commons-net:3.6'
    implementation 'commons-cli:commons-cli:1.4'

    // RPTool Libs
    implementation 'net.rptools.decktool:decktool:1.0.b1'
    implementation 'com.github.RPTools:maptool-resources:1.6.0'
    implementation 'com.github.RPTools:parser:1.8.3'
    implementation 'net.rptools.dicelib:dicelib:1.8.3'

    // Currently hosted on nerps.net/repo
    implementation group: 'com.jidesoft', name: 'jide-common', version: '3.7.9'
    implementation group: 'com.jidesoft', name: 'jide-components', version: '3.7.9'
    implementation group: 'com.jidesoft', name: 'jide-dialogs', version: '3.7.9'
    implementation group: 'com.jidesoft', name: 'jide-dock', version: '3.7.9'
    implementation group: 'com.jidesoft', name: 'jide-editor', version: '3.7.9'
    implementation group: 'com.jidesoft', name: 'jide-grids', version: '3.7.9'
    implementation group: 'com.jidesoft', name: 'jide-properties', version: '3.7.9'
    implementation group: 'com.jidesoft', name: 'jide-shortcut', version: '3.7.9'

    implementation 'org.eclipse.jetty:jetty-server:9.4.25.v20191220'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.31.v20200723'
    implementation 'org.eclipse.jetty:jetty-webapp:9.4.25.v20191220'
    implementation 'org.eclipse.jetty:jetty-continuation:9.4.25.v20191220'
    implementation 'org.eclipse.jetty.websocket:websocket-client:9.4.40.v20210413'
    implementation 'org.eclipse.jetty.websocket:websocket-server:9.4.40.v20210413'
    implementation 'org.eclipse.jetty.websocket:websocket-servlet:9.4.25.v20191220'
    implementation 'org.eclipse.jetty.websocket:websocket-api:9.4.40.v20210413'

    implementation 'net.sf.ezmorph:ezmorph:1.0.6'
    implementation 'net.sf.json-lib:json-lib:2.4:jdk15'
    implementation 'net.java.abeille:abeille-formsrt:2.0'
    implementation 'org.hibernate:antlr:2.7.5H3'
    implementation 'org.reflections:reflections:0.9.11'
    implementation 'com.caucho:hessian:4.0.63'
    implementation 'org.mozilla:rhino:1.7.12'
    implementation 'ca.odell.renderpack:renderpack:1.2004'
    implementation 'net.tsc.servicediscovery:servicediscovery:1.0.b5'
    implementation 'org.swinglabs:swing-worker:1.2'
    implementation 'net.sbbi.upnp:upnplib:1.0.9-nodebug'
    implementation 'com.withay:withay-util:1.0'
    implementation 'xmlpull:xmlpull:1.1.3.1'
    implementation 'xpp3:xpp3_min:1.1.4c'
    implementation 'com.thoughtworks.xstream:xstream:1.4.16'
    implementation 'yasb:yasb:0.2-21012007'
    implementation 'de.muntjak.tinylookandfeel:tinylaf-nocp:1.4.0'
    implementation group: 'org.graalvm.js', name: 'js', version: '21.0.0.2'
    implementation group: 'org.graalvm.js', name: 'js-scriptengine', version: '21.1.0'

    implementation 'com.jayway.jsonpath:json-path:2.4.0'

    // For PDF image extraction
    implementation 'org.apache.pdfbox:pdfbox:2.0.20'
    implementation 'org.apache.pdfbox:pdfbox-tools:2.0.20'
    implementation 'org.bouncycastle:bcmail-jdk15on:1.64'								// To decrypt passworded/secured pdf's
    implementation 'com.github.jai-imageio:jai-imageio-core:1.4.0'						// For pdf image extraction, specifically for jpeg2000 (jpx) support.
    implementation 'com.github.jai-imageio:jai-imageio-jpeg2000:1.3.0'					// For pdf image extraction, specifically for jpeg2000 (jpx) support.

    // Image processing lib
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-core', version: '3.7.0'	// https://mvnrepository.com/artifact/com.twelvemonkeys.imageio/imageio-core
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-jpeg', version: '3.6.4'	// https://mvnrepository.com/artifact/com.twelvemonkeys.imageio/imageio-core
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-psd', version: '3.6.4'	// https://mvnrepository.com/artifact/com.twelvemonkeys.imageio/imageio-psd
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-tiff', version: '3.6.4'
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-batik', version: '3.6.4'
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-tga', version: '3.7.0'
    implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-bmp', version: '3.6.4'

    implementation 'org.apache.xmlgraphics:batik-transcoder:1.13' // For Twelvemonkey SVG

    implementation 'com.github.gotson:webp-imageio:0.2.0' // webp support https://search.maven.org/artifact/com.github.gotson/webp-imageio/0.2.0/jar

    // For syntax highlighting in macro editor
    implementation group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '3.0.8'		// https://mvnrepository.com/artifact/com.fifesoft/rsyntaxtextarea
    implementation group: 'com.fifesoft', name: 'rstaui', version: '3.0.3'				// https://mvnrepository.com/artifact/com.fifesoft/rstaui
    implementation group: 'com.fifesoft', name: 'autocomplete', version: '3.1.1'		// https://mvnrepository.com/artifact/com.fifesoft/autocomplete

    // For simple xml work in Hero Lab integration
    implementation group: 'com.jcabi', name: 'jcabi-xml', version: '0.22.2'				// https://mvnrepository.com/artifact/com.jcabi/jcabi-xml

    // For some math functions used in the A* Pathfinding
    // https://locationtech.github.io/jts/jts-features.html
    implementation group: 'org.locationtech.jts', name: 'jts-core', version: '1.16.1'	// https://mvnrepository.com/artifact/org.locationtech.jts/jts-core

    // For RESTful functions
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.3.0'

    // Better JSON functions...
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'		// https://mvnrepository.com/artifact/com.google.code.gson/gson

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testimplementation dependency to testimplementation 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //testCompile 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    // For mocking features during unit tests
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.9.0'

    // flexmark markdown parsing / conversion
    implementation 'com.vladsch.flexmark:flexmark-all:0.61.12'


    // Apache Tika Parsers for determining file type
    implementation 'com.github.lafa.tikaNoExternal:tika-parsers:1.0.18'

    // Noise Generator
    implementation 'com.github.cwisniew:NoiseLib:1.0.0-rc3' // The most recent version, 1.0.0 is build for a later java version: major version 55 is newer than 54, the highest major version supported by this compiler

}


task configSentryRelease(type: Copy) {
    from("build-resources/sentry.properties.template")
    into("src/main/resources/")
    rename("sentry.properties.template", "sentry.properties")
    def tokens = [
            AppVersion : "${tagVersion}",
            Environment: "${environment}",
            SentryDSN  : "${sentryDSN}"
    ]
    expand(tokens)
    inputs.properties(tokens)
}

task uberJar(type: Jar) {
    group = 'distribution'
    zip64 = true
    description = 'Create uber jar for native installers'

    baseName project.name + '-' + tagVersion
    destinationDirectory = file("$rootDir/releases")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    manifest {
        attributes 'Implementation-Title': project.name + developerRelease,
                'Implementation-Version': tagVersion,
                'Implementation-Vendor': vendor,
                'Git-Commit': revision,
                'Git-Commit-SHA': revisionFull,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility,
                'Main-Class': project.mainClassName
    }

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'	// Jamz: This is needed to prevent org.bouncycastle:bcmail resigning and security errors
    exclude 'module-info.class' //This is to make sure maptool doesn't become a module by including module-info of dependencies. Probably needs to be fixed before we go to jdk 11+
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name + developerRelease,
                'Implementation-Version': tagVersion,
                'Implementation-Vendor': vendor,
                'Git-Commit': revision,
                'Git-Commit-SHA': revisionFull,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility,
                'Main-Class': project.mainClassName
    }
}

// For logging Git Commit during CI
task displayGitInfo {
    doLast {
        println 'Git-Commit-SHA: ' + revisionFull
    }
}

// Currently includes license files
task copyPackageExtras(type: Copy) {
    from('package/license/')
    into('build/libs/')
    include('*')
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

javadoc {
    options.addStringOption('Xmaxwarns', '2000')
    options.addBooleanOption('html5', true)
    options.tags("note:a:<strong><u>Note:</u></strong>")
}

test {
    useJUnitPlatform()
}

task createWrapper(type: Wrapper) {
    gradleVersion = '6.3'
}

// Configure current release tag in Sentry.io properties
processResources.dependsOn configSentryRelease
