/*
 * This software Copyright by the RPTools.net development team, and
 * licensed under the Affero GPL Version 3 or, at your option, any later
 * version.
 *
 * MapTool Source Code is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public
 * License * along with this source Code.  If not, please visit
 * <http://www.gnu.org/licenses/> and specifically the Affero license
 * text at <http://www.gnu.org/licenses/agpl.html>.
 */
package net.rptools.maptool.client.ui.startserverdialog;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.Locale;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;

public class StartServerDialogView {
  private JPanel mainPanel;

  public JComponent getRootComponent() {
    return mainPanel;
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }
  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    mainPanel = new JPanel();
    mainPanel.setLayout(new GridLayoutManager(8, 4, new Insets(5, 5, 5, 5), -1, -1));
    final JTextField textField1 = new JTextField();
    textField1.setColumns(20);
    textField1.setName("@GMPassword");
    textField1.setText("");
    mainPanel.add(
        textField1,
        new GridConstraints(
            3,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JTextField textField2 = new JTextField();
    textField2.setColumns(20);
    textField2.setName("@playerPassword");
    textField2.setText("");
    mainPanel.add(
        textField2,
        new GridConstraints(
            4,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label1 = new JLabel();
    label1.setName("username");
    this.$$$loadLabelText$$$(
        label1,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ConnectToServerDialog.username"));
    mainPanel.add(
        label1,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label2 = new JLabel();
    this.$$$loadLabelText$$$(
        label2,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ConnectionInfoDialog.port"));
    mainPanel.add(
        label2,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label3 = new JLabel();
    this.$$$loadLabelText$$$(
        label3,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.label.password"));
    mainPanel.add(
        label3,
        new GridConstraints(
            4,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JComboBox comboBox1 = new JComboBox();
    comboBox1.setActionCommand("comboBoxChanged");
    comboBox1.setName("role");
    mainPanel.add(
        comboBox1,
        new GridConstraints(
            0,
            2,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label4 = new JLabel();
    this.$$$loadLabelText$$$(
        label4,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.label.alias"));
    label4.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.tooltip.alias"));
    mainPanel.add(
        label4,
        new GridConstraints(
            2,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JTextField textField3 = new JTextField();
    textField3.setColumns(20);
    textField3.setName("@RPToolsName");
    textField3.setText("");
    textField3.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.tooltip.alias"));
    mainPanel.add(
        textField3,
        new GridConstraints(
            2,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label5 = new JLabel();
    Font label5Font = this.$$$getFont$$$(null, Font.ITALIC, -1, label5.getFont());
    if (label5Font != null) label5.setFont(label5Font);
    this.$$$loadLabelText$$$(
        label5,
        this.$$$getMessageFromBundle$$$("net/rptools/maptool/language/i18n", "Label.optional"));
    mainPanel.add(
        label5,
        new GridConstraints(
            2,
            2,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JButton button1 = new JButton();
    button1.setName("@generateGMPassword");
    this.$$$loadButtonText$$$(
        button1,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.generatePassword"));
    mainPanel.add(
        button1,
        new GridConstraints(
            3,
            2,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JButton button2 = new JButton();
    button2.setName("@generatePlayerPassword");
    this.$$$loadButtonText$$$(
        button2,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.generatePassword"));
    mainPanel.add(
        button2,
        new GridConstraints(
            4,
            2,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label6 = new JLabel();
    this.$$$loadLabelText$$$(
        label6,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.label.gmpassword"));
    mainPanel.add(
        label6,
        new GridConstraints(
            3,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(15, 3, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(
        panel1,
        new GridConstraints(
            6,
            0,
            1,
            3,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    panel1.setBorder(
        BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(-6710887)),
            this.$$$getMessageFromBundle$$$("net/rptools/maptool/language/i18n", "Label.options"),
            TitledBorder.DEFAULT_JUSTIFICATION,
            TitledBorder.DEFAULT_POSITION,
            this.$$$getFont$$$("Dialog", Font.BOLD, 12, panel1.getFont()),
            new Color(-13538620)));
    final JCheckBox checkBox1 = new JCheckBox();
    checkBox1.setActionCommand("Strict token ownership");
    checkBox1.setName("@useStrictTokenOwnership");
    this.$$$loadButtonText$$$(
        checkBox1,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.ownership"));
    checkBox1.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.ownership.tooltip"));
    panel1.add(
        checkBox1,
        new GridConstraints(
            0,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox2 = new JCheckBox();
    checkBox2.setActionCommand("Players can reveal vision");
    checkBox2.setName("@playersCanRevealVision");
    this.$$$loadButtonText$$$(
        checkBox2,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.reveal.player"));
    panel1.add(
        checkBox2,
        new GridConstraints(
            2,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox3 = new JCheckBox();
    checkBox3.setActionCommand("Use Individual Views");
    checkBox3.setName("@useIndividualViews");
    this.$$$loadButtonText$$$(
        checkBox3,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.vision.individual"));
    checkBox3.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.vision.individual.tooltip"));
    panel1.add(
        checkBox3,
        new GridConstraints(
            4,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox4 = new JCheckBox();
    checkBox4.setActionCommand("Use Unrestricted Player Impersonation");
    checkBox4.setName("@restrictedImpersonation");
    this.$$$loadButtonText$$$(
        checkBox4,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.impersonate"));
    checkBox4.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.impersonate.tooltip"));
    panel1.add(
        checkBox4,
        new GridConstraints(
            6,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox5 = new JCheckBox();
    checkBox5.setActionCommand("Use Unrestricted Player Impersonation");
    checkBox5.setName("@playersReceiveCampaignMacros");
    this.$$$loadButtonText$$$(
        checkBox5,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.macros"));
    checkBox5.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.macros.tooltip"));
    panel1.add(
        checkBox5,
        new GridConstraints(
            7,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox6 = new JCheckBox();
    checkBox6.setActionCommand("Use Unrestricted Player Impersonation");
    checkBox6.setName("@useToolTipsForUnformattedRolls");
    this.$$$loadButtonText$$$(
        checkBox6,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.rolls"));
    checkBox6.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.rolls.tooltip"));
    panel1.add(
        checkBox6,
        new GridConstraints(
            8,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label7 = new JLabel();
    this.$$$loadLabelText$$$(
        label7,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.label.metric"));
    label7.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.label.metric.tooltip"));
    panel1.add(
        label7,
        new GridConstraints(
            14,
            0,
            1,
            2,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox7 = new JCheckBox();
    checkBox7.setActionCommand("Use Individual Views");
    checkBox7.setName("@useIndividualFOW");
    this.$$$loadButtonText$$$(
        checkBox7,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.fow.individual"));
    checkBox7.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.fow.individual.tooltip"));
    panel1.add(
        checkBox7,
        new GridConstraints(
            5,
            1,
            1,
            2,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox8 = new JCheckBox();
    checkBox8.setActionCommand("Players can reveal vision");
    checkBox8.setName("@gmRevealsVisionForUnownedTokens");
    this.$$$loadButtonText$$$(
        checkBox8,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.reveal.gm"));
    checkBox8.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.reveal.gm.tooltip"));
    panel1.add(
        checkBox8,
        new GridConstraints(
            1,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox9 = new JCheckBox();
    checkBox9.setActionCommand("Use Unrestricted Player Impersonation");
    checkBox9.setName("@hideMapSelectUI");
    this.$$$loadButtonText$$$(
        checkBox9,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.hidemapselectui"));
    checkBox9.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.hidemapselectui.tooltip"));
    panel1.add(
        checkBox9,
        new GridConstraints(
            9,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox10 = new JCheckBox();
    checkBox10.setActionCommand("Lock Token Edit on Start");
    checkBox10.setName("@lockTokenEditOnStartup");
    this.$$$loadButtonText$$$(
        checkBox10,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "action.toggleTokenEditorLock"));
    checkBox10.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "action.toggleTokenEditorLock.description"));
    panel1.add(
        checkBox10,
        new GridConstraints(
            10,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox11 = new JCheckBox();
    checkBox11.setActionCommand("Lock Play Movement");
    checkBox11.setName("@lockPlayerMovementOnStartup");
    this.$$$loadButtonText$$$(
        checkBox11,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "action.toggleMovementLock"));
    checkBox11.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "action.toggleMovementLock.description"));
    panel1.add(
        checkBox11,
        new GridConstraints(
            11,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox12 = new JCheckBox();
    checkBox12.setActionCommand("Lock Player Library");
    checkBox12.setName("@disablePlayerLibrary");
    this.$$$loadButtonText$$$(
        checkBox12,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.disablePlayerLibrary"));
    checkBox12.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n",
            "ServerDialog.option.disablePlayerLibrary.tooltip"));
    panel1.add(
        checkBox12,
        new GridConstraints(
            12,
            0,
            1,
            3,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox13 = new JCheckBox();
    checkBox13.setActionCommand("Auto Reveal On Movement");
    checkBox13.setName("@autoRevealOnMovement");
    this.$$$loadButtonText$$$(
        checkBox13,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.reveal.move"));
    checkBox13.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.option.reveal.move.tooltip"));
    panel1.add(
        checkBox13,
        new GridConstraints(
            3,
            1,
            1,
            2,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JComboBox comboBox2 = new JComboBox();
    comboBox2.setActionCommand("comboBoxChanged");
    comboBox2.setName("movementMetric");
    comboBox2.setToolTipText("Determines how MapTool handles movement on the selected grid type.");
    panel1.add(
        comboBox2,
        new GridConstraints(
            14,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer1 = new Spacer();
    panel1.add(
        spacer1,
        new GridConstraints(
            13,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(
        panel2,
        new GridConstraints(
            7,
            0,
            1,
            3,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JButton button3 = new JButton();
    button3.setActionCommand("Test Connection");
    button3.setName("networkingHelpButton");
    this.$$$loadButtonText$$$(
        button3,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.button.networkinghelp"));
    panel2.add(
        button3,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JButton button4 = new JButton();
    button4.setActionCommand("OK");
    button4.setName("okButton");
    this.$$$loadButtonText$$$(
        button4, this.$$$getMessageFromBundle$$$("net/rptools/maptool/language/i18n", "Button.ok"));
    panel2.add(
        button4,
        new GridConstraints(
            0,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JButton button5 = new JButton();
    button5.setActionCommand("Cancel");
    button5.setName("cancelButton");
    this.$$$loadButtonText$$$(
        button5,
        this.$$$getMessageFromBundle$$$("net/rptools/maptool/language/i18n", "Button.cancel"));
    panel2.add(
        button5,
        new GridConstraints(
            0,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer2 = new Spacer();
    panel2.add(
        spacer2,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(
        panel3,
        new GridConstraints(
            1,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JTextField textField4 = new JTextField();
    textField4.setColumns(5);
    textField4.setName("@port");
    textField4.setText("");
    panel3.add(
        textField4,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox14 = new JCheckBox();
    checkBox14.setActionCommand("Use UPnP");
    checkBox14.setName("@useUPnP");
    this.$$$loadButtonText$$$(
        checkBox14,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.label.usepnp"));
    checkBox14.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.tooltip.useupnp"));
    panel3.add(
        checkBox14,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox15 = new JCheckBox();
    checkBox15.setActionCommand("Use UPnP");
    checkBox15.setName("@useWebRTC");
    this.$$$loadButtonText$$$(
        checkBox15,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "WebRTC.toggleUseWebRTC"));
    checkBox15.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "WebRTC.toggleUseWebRTC.tooltip"));
    mainPanel.add(
        checkBox15,
        new GridConstraints(
            5,
            2,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox16 = new JCheckBox();
    checkBox16.setActionCommand("Use UPnP");
    checkBox16.setName("@useEasyConnect");
    this.$$$loadButtonText$$$(
        checkBox16,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.label.useEasyConnect"));
    checkBox16.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.tooltip.useEasyConnect"));
    mainPanel.add(
        checkBox16,
        new GridConstraints(
            5,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox17 = new JCheckBox();
    checkBox17.setActionCommand("Use UPnP");
    checkBox17.setName("@usePasswordFile");
    this.$$$loadButtonText$$$(
        checkBox17,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.label.usePasswordFile"));
    checkBox17.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "ServerDialog.tooltip.usePasswordFile"));
    mainPanel.add(
        checkBox17,
        new GridConstraints(
            5,
            1,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer3 = new Spacer();
    mainPanel.add(
        spacer3,
        new GridConstraints(
            6,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_VERTICAL,
            1,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            null,
            null,
            null,
            0,
            false));
    final JTextField textField5 = new JTextField();
    textField5.setColumns(20);
    textField5.setName("@username");
    textField5.setText("");
    mainPanel.add(
        textField5,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) return null;
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    } else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      } else {
        resultName = currentFont.getName();
      }
    }
    Font font =
        new Font(
            resultName,
            style >= 0 ? style : currentFont.getStyle(),
            size >= 0 ? size : currentFont.getSize());
    boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
    Font fontWithFallback =
        isMac
            ? new Font(font.getFamily(), font.getStyle(), font.getSize())
            : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
    return fontWithFallback instanceof FontUIResource
        ? fontWithFallback
        : new FontUIResource(fontWithFallback);
  }

  private static Method $$$cachedGetBundleMethod$$$ = null;

  private String $$$getMessageFromBundle$$$(String path, String key) {
    ResourceBundle bundle;
    try {
      Class<?> thisClass = this.getClass();
      if ($$$cachedGetBundleMethod$$$ == null) {
        Class<?> dynamicBundleClass =
            thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
        $$$cachedGetBundleMethod$$$ =
            dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
      }
      bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
    } catch (Exception e) {
      bundle = ResourceBundle.getBundle(path);
    }
    return bundle.getString(key);
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadLabelText$$$(JLabel component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setDisplayedMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadButtonText$$$(AbstractButton component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }
}
