/*
 * This software Copyright by the RPTools.net development team, and
 * licensed under the Affero GPL Version 3 or, at your option, any later
 * version.
 *
 * MapTool Source Code is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public
 * License * along with this source Code.  If not, please visit
 * <http://www.gnu.org/licenses/> and specifically the Affero license
 * text at <http://www.gnu.org/licenses/agpl.html>.
 */
package net.rptools.maptool.client.ui.macrobuttons.dialog;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.Locale;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import org.fife.rsta.ui.CollapsibleSectionPanel;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rtextarea.RTextScrollPane;

public class MacroButtonDialogView {
  private JPanel mainPanel;

  public JComponent getRootComponent() {
    return mainPanel;
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }
  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    mainPanel = new JPanel();
    mainPanel.setLayout(new GridLayoutManager(2, 2, new Insets(5, 5, 5, 5), -1, -1));
    final JTabbedPane tabbedPane1 = new JTabbedPane();
    tabbedPane1.setName("macroTabs");
    mainPanel.add(
        tabbedPane1,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
    panel1.setName("macroEditorPane");
    tabbedPane1.addTab(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tab.macro.editor"),
        panel1);
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new BorderLayout(0, 0));
    panel2.setName("macroEditorPanel");
    panel1.add(
        panel2,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    panel2.setBorder(
        BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(-16777216)),
            this.$$$getMessageFromBundle$$$(
                "net/rptools/maptool/language/i18n", "component.label.macro.command"),
            TitledBorder.DEFAULT_JUSTIFICATION,
            TitledBorder.DEFAULT_POSITION,
            this.$$$getFont$$$("Dialog", Font.BOLD, 12, panel2.getFont()),
            new Color(-13538620)));
    final JLabel label1 = new JLabel();
    Font label1Font = this.$$$getFont$$$("SansSerif", -1, 10, label1.getFont());
    if (label1Font != null) label1.setFont(label1Font);
    label1.setName("statusBarLabel");
    this.$$$loadLabelText$$$(
        label1,
        this.$$$getMessageFromBundle$$$("net/rptools/maptool/language/i18n", "Label.ready"));
    panel1.add(
        label1,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer1 = new Spacer();
    panel1.add(
        spacer1,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_VERTICAL,
            1,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridLayoutManager(6, 9, new Insets(5, 5, 5, 5), -1, -1));
    panel3.setName("macroDetailsPanel");
    panel3.setVisible(true);
    tabbedPane1.addTab(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tab.macro.details"),
        panel3);
    final JTextField textField1 = new JTextField();
    textField1.setColumns(15);
    textField1.setName("label");
    textField1.setText("");
    textField1.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.label"));
    panel3.add(
        textField1,
        new GridConstraints(
            0,
            1,
            1,
            7,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox1 = new JCheckBox();
    checkBox1.setActionCommand("Auto execute");
    checkBox1.setName("autoExecuteCheckBox");
    this.$$$loadButtonText$$$(
        checkBox1,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.autoExecute"));
    checkBox1.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.autoExecute"));
    panel3.add(
        checkBox1,
        new GridConstraints(
            3,
            1,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox2 = new JCheckBox();
    checkBox2.setActionCommand("Auto execute");
    checkBox2.setName("applyToTokensCheckBox");
    this.$$$loadButtonText$$$(
        checkBox2,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.applyToSelected"));
    checkBox2.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.applyToSelected"));
    panel3.add(
        checkBox2,
        new GridConstraints(
            4,
            1,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label2 = new JLabel();
    label2.setHorizontalAlignment(4);
    label2.setName("macroFontColorLabel");
    this.$$$loadLabelText$$$(
        label2,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.fontColor"));
    panel3.add(
        label2,
        new GridConstraints(
            3,
            2,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label3 = new JLabel();
    label3.setHorizontalAlignment(4);
    label3.setName("macroFontSizeLabel");
    this.$$$loadLabelText$$$(
        label3,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.fontSize"));
    panel3.add(
        label3,
        new GridConstraints(
            4,
            2,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JComboBox comboBox1 = new JComboBox();
    comboBox1.setActionCommand("comboBoxChanged");
    comboBox1.setEditable(true);
    comboBox1.setName("fontColorComboBox");
    comboBox1.setRequestFocusEnabled(false);
    comboBox1.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.fontColor"));
    panel3.add(
        comboBox1,
        new GridConstraints(
            3,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JComboBox comboBox2 = new JComboBox();
    comboBox2.setActionCommand("comboBoxChanged");
    comboBox2.setEditable(true);
    comboBox2.setName("fontSizeComboBox");
    comboBox2.setRequestFocusEnabled(false);
    comboBox2.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.fontSize"));
    panel3.add(
        comboBox2,
        new GridConstraints(
            4,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label4 = new JLabel();
    label4.setHorizontalAlignment(4);
    label4.setName("macroMaxWidthLabel");
    this.$$$loadLabelText$$$(
        label4,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.maxWidth"));
    label4.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.maxWidth"));
    panel3.add(
        label4,
        new GridConstraints(
            4,
            4,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label5 = new JLabel();
    label5.setHorizontalAlignment(4);
    label5.setName("macroMinWidthLabel");
    this.$$$loadLabelText$$$(
        label5,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.minWidth"));
    label5.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.minWidth"));
    panel3.add(
        label5,
        new GridConstraints(
            3,
            4,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JTextField textField2 = new JTextField();
    textField2.setColumns(15);
    textField2.setName("maxWidth");
    textField2.setText("");
    panel3.add(
        textField2,
        new GridConstraints(
            4,
            5,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JTextField textField3 = new JTextField();
    textField3.setColumns(15);
    textField3.setName("minWidth");
    textField3.setText("");
    panel3.add(
        textField3,
        new GridConstraints(
            3,
            5,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label6 = new JLabel();
    label6.setHorizontalAlignment(4);
    label6.setName("macroGroupLabel");
    this.$$$loadLabelText$$$(
        label6,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.group"));
    panel3.add(
        label6,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JTextField textField4 = new JTextField();
    textField4.setColumns(15);
    textField4.setName("group");
    textField4.setText("");
    textField4.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.group"));
    panel3.add(
        textField4,
        new GridConstraints(
            1,
            1,
            1,
            7,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label7 = new JLabel();
    label7.setHorizontalAlignment(4);
    label7.setName("macroHotKeyLabel");
    this.$$$loadLabelText$$$(
        label7,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.hotKey"));
    panel3.add(
        label7,
        new GridConstraints(
            3,
            6,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label8 = new JLabel();
    label8.setHorizontalAlignment(2);
    label8.setName("macroToolTipLabel");
    this.$$$loadLabelText$$$(
        label8,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.toolTip"));
    panel3.add(
        label8,
        new GridConstraints(
            5,
            0,
            1,
            1,
            GridConstraints.ANCHOR_NORTHWEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox3 = new JCheckBox();
    checkBox3.setActionCommand("Include Label");
    checkBox3.setFocusCycleRoot(true);
    checkBox3.setName("displayHotKeyCheckBox");
    this.$$$loadButtonText$$$(
        checkBox3,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.displayHotKey"));
    checkBox3.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.displayHotKey"));
    panel3.add(
        checkBox3,
        new GridConstraints(
            4,
            6,
            1,
            2,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label9 = new JLabel();
    label9.setHorizontalAlignment(4);
    label9.setName("macroLabelLabel");
    this.$$$loadLabelText$$$(
        label9,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.label"));
    panel3.add(
        label9,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox4 = new JCheckBox();
    checkBox4.setFocusCycleRoot(true);
    checkBox4.setName("includeLabelCheckBox");
    this.$$$loadButtonText$$$(
        checkBox4,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.includeLabel"));
    checkBox4.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.includeLabel"));
    panel3.add(
        checkBox4,
        new GridConstraints(
            2,
            1,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label10 = new JLabel();
    label10.setHorizontalAlignment(4);
    label10.setName("macroButtonColorLabel");
    this.$$$loadLabelText$$$(
        label10,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.buttonColor"));
    panel3.add(
        label10,
        new GridConstraints(
            2,
            2,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JComboBox comboBox3 = new JComboBox();
    comboBox3.setActionCommand("comboBoxChanged");
    comboBox3.setEditable(true);
    comboBox3.setName("colorComboBox");
    comboBox3.setRequestFocusEnabled(false);
    panel3.add(
        comboBox3,
        new GridConstraints(
            2,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JLabel label11 = new JLabel();
    label11.setHorizontalAlignment(4);
    label11.setName("macroSortPrefixLabel");
    this.$$$loadLabelText$$$(
        label11,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.sortPrefix"));
    panel3.add(
        label11,
        new GridConstraints(
            2,
            4,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JTextField textField5 = new JTextField();
    textField5.setColumns(15);
    textField5.setName("sortby");
    textField5.setText("");
    textField5.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.sortPrefix"));
    panel3.add(
        textField5,
        new GridConstraints(
            2,
            5,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JComboBox comboBox4 = new JComboBox();
    comboBox4.setActionCommand("comboBoxChanged");
    comboBox4.setMaximumRowCount(12);
    comboBox4.setName("hotKey");
    comboBox4.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.hotKey"));
    panel3.add(
        comboBox4,
        new GridConstraints(
            3,
            7,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer2 = new Spacer();
    panel3.add(
        spacer2,
        new GridConstraints(
            0,
            8,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer3 = new Spacer();
    panel3.add(
        spacer3,
        new GridConstraints(
            5,
            8,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_VERTICAL,
            1,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            null,
            null,
            null,
            0,
            false));
    final CollapsibleSectionPanel collapsibleSectionPanel1 = new CollapsibleSectionPanel();
    collapsibleSectionPanel1.setLayout(new BorderLayout(0, 0));
    panel3.add(
        collapsibleSectionPanel1,
        new GridConstraints(
            5,
            1,
            1,
            7,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final RTextScrollPane rTextScrollPane1 = new RTextScrollPane();
    rTextScrollPane1.setFoldIndicatorEnabled(true);
    rTextScrollPane1.setIconRowHeaderEnabled(true);
    rTextScrollPane1.setLineNumbersEnabled(true);
    collapsibleSectionPanel1.add(rTextScrollPane1, BorderLayout.CENTER);
    final RSyntaxTextArea rSyntaxTextArea1 = new RSyntaxTextArea();
    rSyntaxTextArea1.setCodeFoldingEnabled(true);
    rSyntaxTextArea1.setLineWrap(true);
    rSyntaxTextArea1.setName("toolTip");
    rSyntaxTextArea1.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.tooltip"));
    rTextScrollPane1.setViewportView(rSyntaxTextArea1);
    final JPanel panel4 = new JPanel();
    panel4.setLayout(new GridLayoutManager(3, 1, new Insets(5, 5, 5, 5), -1, -1));
    panel4.setVisible(false);
    tabbedPane1.addTab(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tab.macro.options"),
        panel4);
    final JPanel panel5 = new JPanel();
    panel5.setLayout(new GridLayoutManager(6, 1, new Insets(0, 0, 0, 0), -1, -1));
    panel5.setName("macroComparisonGridView");
    panel4.add(
        panel5,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_NORTHWEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    panel5.setBorder(
        BorderFactory.createTitledBorder(
            null,
            this.$$$getMessageFromBundle$$$(
                "net/rptools/maptool/language/i18n", "component.label.macro.macroCommonality"),
            TitledBorder.DEFAULT_JUSTIFICATION,
            TitledBorder.DEFAULT_POSITION,
            this.$$$getFont$$$("Dialog", Font.BOLD, 12, panel5.getFont()),
            new Color(-13538620)));
    final JCheckBox checkBox5 = new JCheckBox();
    checkBox5.setActionCommand("Use Label");
    checkBox5.setName("commonUseGroup");
    this.$$$loadButtonText$$$(
        checkBox5,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.compareUseGroup"));
    checkBox5.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.compareUseGroup"));
    panel5.add(
        checkBox5,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox6 = new JCheckBox();
    checkBox6.setActionCommand("Use Label");
    checkBox6.setName("commonUseCommand");
    this.$$$loadButtonText$$$(
        checkBox6,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.compareUseCommand"));
    checkBox6.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.compareUseCommand"));
    panel5.add(
        checkBox6,
        new GridConstraints(
            2,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox7 = new JCheckBox();
    checkBox7.setActionCommand("Use Label");
    checkBox7.setName("commonUseApplyToSelectedTokens");
    this.$$$loadButtonText$$$(
        checkBox7,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.compareApplyToSelected"));
    checkBox7.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n",
            "component.tooltip.macro.compareUseApplyToSelected"));
    panel5.add(
        checkBox7,
        new GridConstraints(
            5,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox8 = new JCheckBox();
    checkBox8.setActionCommand("Use Label");
    checkBox8.setName("commonUseSortPrefix");
    this.$$$loadButtonText$$$(
        checkBox8,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.compareUseSortPrefix"));
    checkBox8.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.compareUseSortPrefix"));
    panel5.add(
        checkBox8,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox9 = new JCheckBox();
    checkBox9.setActionCommand("Use Label");
    checkBox9.setName("commonUseIncludeLabel");
    this.$$$loadButtonText$$$(
        checkBox9,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.compareUseIncludeLabel"));
    checkBox9.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.compareUseIncludeLabel"));
    panel5.add(
        checkBox9,
        new GridConstraints(
            3,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox10 = new JCheckBox();
    checkBox10.setActionCommand("Use Label");
    checkBox10.setName("commonUseAutoExecute");
    this.$$$loadButtonText$$$(
        checkBox10,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.compareUseAutoExecute"));
    checkBox10.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.compareUseAutoExecute"));
    panel5.add(
        checkBox10,
        new GridConstraints(
            4,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JCheckBox checkBox11 = new JCheckBox();
    checkBox11.setName("allowPlayerEditsCheckBox");
    this.$$$loadButtonText$$$(
        checkBox11,
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.label.macro.allowPlayerEdits"));
    checkBox11.setToolTipText(
        this.$$$getMessageFromBundle$$$(
            "net/rptools/maptool/language/i18n", "component.tooltip.macro.allowPlayerEdits"));
    panel4.add(
        checkBox11,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer4 = new Spacer();
    panel4.add(
        spacer4,
        new GridConstraints(
            2,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_VERTICAL,
            1,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel6 = new JPanel();
    panel6.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(
        panel6,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JButton button1 = new JButton();
    button1.setActionCommand("Cancel");
    button1.setName("cancelButton");
    this.$$$loadButtonText$$$(
        button1,
        this.$$$getMessageFromBundle$$$("net/rptools/maptool/language/i18n", "Button.cancel"));
    panel6.add(
        button1,
        new GridConstraints(
            0,
            4,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JButton button2 = new JButton();
    button2.setActionCommand("OK");
    button2.setName("okButton");
    this.$$$loadButtonText$$$(
        button2, this.$$$getMessageFromBundle$$$("net/rptools/maptool/language/i18n", "Button.ok"));
    panel6.add(
        button2,
        new GridConstraints(
            0,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JButton button3 = new JButton();
    button3.setActionCommand("OK");
    button3.setName("runButton");
    this.$$$loadButtonText$$$(
        button3,
        this.$$$getMessageFromBundle$$$("net/rptools/maptool/language/i18n", "Button.runmacro"));
    panel6.add(
        button3,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final JButton button4 = new JButton();
    button4.setActionCommand("OK");
    button4.setName("applyButton");
    this.$$$loadButtonText$$$(
        button4,
        this.$$$getMessageFromBundle$$$("net/rptools/maptool/language/i18n", "Button.apply"));
    panel6.add(
        button4,
        new GridConstraints(
            0,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer5 = new Spacer();
    panel6.add(
        spacer5,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer6 = new Spacer();
    mainPanel.add(
        spacer6,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_VERTICAL,
            1,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            null,
            null,
            null,
            0,
            false));
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) return null;
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    } else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      } else {
        resultName = currentFont.getName();
      }
    }
    Font font =
        new Font(
            resultName,
            style >= 0 ? style : currentFont.getStyle(),
            size >= 0 ? size : currentFont.getSize());
    boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
    Font fontWithFallback =
        isMac
            ? new Font(font.getFamily(), font.getStyle(), font.getSize())
            : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
    return fontWithFallback instanceof FontUIResource
        ? fontWithFallback
        : new FontUIResource(fontWithFallback);
  }

  private static Method $$$cachedGetBundleMethod$$$ = null;

  private String $$$getMessageFromBundle$$$(String path, String key) {
    ResourceBundle bundle;
    try {
      Class<?> thisClass = this.getClass();
      if ($$$cachedGetBundleMethod$$$ == null) {
        Class<?> dynamicBundleClass =
            thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
        $$$cachedGetBundleMethod$$$ =
            dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
      }
      bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
    } catch (Exception e) {
      bundle = ResourceBundle.getBundle(path);
    }
    return bundle.getString(key);
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadLabelText$$$(JLabel component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setDisplayedMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadButtonText$$$(AbstractButton component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }
}
